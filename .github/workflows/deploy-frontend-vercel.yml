name: Deploy frontend to Vercel

on:
  push:
    branches: [ main ]

concurrency:
  group: vercel-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      RAILWAY_PUBLIC_URL: ${{ secrets.RAILWAY_PUBLIC_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Export Kobweb site (static)
        run: |
          ./gradlew :site:kobwebExport --no-daemon
          echo "-- Debug listing --"
          ls -la site || true
          ls -la site/build || true
          ls -la site/build/kobweb || true
          ls -la site/.kobweb || true
          ls -la site/.kobweb/site || true
          find site -maxdepth 5 -type f -name index.html -print || true

      - name: Resolve export directory and inject vercel.json
        id: resolve_export
        run: |
          # Prefer known locations, else try to auto-detect any reasonable index.html
          CANDIDATES=(
            site/build/kobweb/export
            site/build/kobweb/site
            site/.kobweb/site
            site/build/dist/js/productionExecutable/public
          )
          EXPORT_DIR=""
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/index.html" ]; then EXPORT_DIR="$d"; break; fi
          done
          if [ -z "$EXPORT_DIR" ]; then
            # Fallback: find an index.html under site that looks like a build output
            FOUND=$(find site -maxdepth 6 -type f -name index.html | grep -E "/(export|public|\.kobweb/site)/index\.html" | head -n1 || true)
            if [ -n "$FOUND" ]; then
              EXPORT_DIR=$(dirname "$FOUND")
            fi
          fi
          if [ -z "$EXPORT_DIR" ]; then
            echo "Kobweb export directory not found (no index.html)." >&2
            exit 1
          fi
          echo "Using EXPORT_DIR=$EXPORT_DIR"
          echo "EXPORT_DIR=$EXPORT_DIR" >> $GITHUB_OUTPUT
          echo "EXPORT_DIR=$EXPORT_DIR" >> $GITHUB_OUTPUT

          if [ -z "$RAILWAY_PUBLIC_URL" ]; then
            echo "Missing RAILWAY_PUBLIC_URL secret (e.g., https://YOUR-APP.up.railway.app)" >&2
            exit 1
          fi
          # Copy root vercel.json, replacing placeholder with the actual Railway URL
          sed "s|https://YOUR-RAILWAY-APP.up.railway.app|$RAILWAY_PUBLIC_URL|g" vercel.json > "$EXPORT_DIR/vercel.json"

      - name: Assemble deploy folder
        id: assemble_deploy
        env:
          EXPORT_DIR: ${{ steps.resolve_export.outputs.EXPORT_DIR }}
        run: |
          set -e
          DEPLOY_DIR="site/build/vercel_deploy"
          DIST_DIR="site/build/distributions"
          PROD_DIR="site/build/dist/js/productionExecutable"
          KOTLIN_WEBPACK_PROD_DIR="site/build/kotlin-webpack/js/main/productionExecutable"
          KOBWEB_SITE_DIR="site/.kobweb/site"
          rm -rf "$DEPLOY_DIR" && mkdir -p "$DEPLOY_DIR"

          # 1) Prefer Kobweb consolidated site output if present
          if [ -d "$KOBWEB_SITE_DIR" ]; then
            echo "Assembling from $KOBWEB_SITE_DIR (preferred)"
            echo "-- List $KOBWEB_SITE_DIR --"
            ls -la "$KOBWEB_SITE_DIR" || true
            cp -r "$KOBWEB_SITE_DIR"/* "$DEPLOY_DIR/" || true
            # Move pages/* to root so index.html sits at root
            if [ -d "$DEPLOY_DIR/pages" ]; then
              echo "Flattening pages/ into root"
              cp -r "$DEPLOY_DIR/pages/"* "$DEPLOY_DIR/" || true
              rm -rf "$DEPLOY_DIR/pages"
            fi
            echo "-- After Kobweb copy, deploy dir --"
            ls -la "$DEPLOY_DIR" || true
            if [ -d "$DEPLOY_DIR/system" ]; then
              echo "-- system/ listing --"
              ls -la "$DEPLOY_DIR/system" || true
            fi
          fi

          # 2) Merge other known outputs in case Kobweb dir missed some assets
          if [ -d "$DIST_DIR" ]; then
            echo "Merging bundle(s) from $DIST_DIR"
            cp -r "$DIST_DIR"/* "$DEPLOY_DIR/" || true
          fi

          if [ -d "$PROD_DIR" ]; then
            echo "Merging productionExecutable from $PROD_DIR"
            cp -r "$PROD_DIR"/* "$DEPLOY_DIR/" || true
            if [ -d "$PROD_DIR/public" ]; then
              cp -r "$PROD_DIR/public/"* "$DEPLOY_DIR/" || true
              rm -rf "$DEPLOY_DIR/public"
            fi
          fi

          if [ -d "$KOTLIN_WEBPACK_PROD_DIR" ]; then
            echo "Merging kotlin-webpack productionExecutable from $KOTLIN_WEBPACK_PROD_DIR"
            cp -r "$KOTLIN_WEBPACK_PROD_DIR"/* "$DEPLOY_DIR/" || true
            if [ -d "$KOTLIN_WEBPACK_PROD_DIR/public" ]; then
              cp -r "$KOTLIN_WEBPACK_PROD_DIR/public/"* "$DEPLOY_DIR/" || true
              rm -rf "$DEPLOY_DIR/public"
            fi
          fi

          # 3) Overlay public from resolved EXPORT_DIR (processedResources or export dir)
          echo "Overlaying public from EXPORT_DIR=$EXPORT_DIR"
          cp -r "$EXPORT_DIR"/* "$DEPLOY_DIR/" || true

          # Ensure vercel.json present
          if [ -f "$EXPORT_DIR/vercel.json" ]; then
            cp "$EXPORT_DIR/vercel.json" "$DEPLOY_DIR/vercel.json"
          fi

          echo "-- Deploy dir contents (top) --"
          ls -la "$DEPLOY_DIR" || true
          # Validate where the bundle is expected in Kobweb output
          if [ -f "$DEPLOY_DIR/system/bug_or_feature.js" ]; then
            echo "Bundle present at system/bug_or_feature.js (Kobweb layout)"
          elif [ -f "$DEPLOY_DIR/bug_or_feature.js" ]; then
            echo "Bundle present at root bug_or_feature.js"
          else
            echo "ERROR: bug_or_feature.js not found in deploy folder. Listing candidates:" >&2
            find "$DEPLOY_DIR" -maxdepth 3 -type f -name "*.js" -print >&2 || true
            exit 1
          fi

          echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_OUTPUT

      - name: Wait for Railway (healthy)
        run: |
          URL="${RAILWAY_PUBLIC_URL%/}/prompts"
          echo "Waiting for server to be healthy at $URL ..."
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then
              echo "Railway healthy (200). Proceeding to deploy frontend."
              exit 0
            fi
            echo "Attempt $i/60: got $code, retrying in 5s..."
            sleep 5
          done
          echo "Railway not healthy after 5 minutes. Failing build to avoid broken frontend deploy."
          exit 1

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Deploy to Vercel (prod)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd "${{ steps.assemble_deploy.outputs.DEPLOY_DIR }}"
          # The Vercel CLI uses VERCEL_ORG_ID and VERCEL_PROJECT_ID from env
          vercel --prod --yes --token "$VERCEL_TOKEN"
